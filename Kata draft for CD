/*																		
THE WORKING CODE (FIREFOX DEV., REPL.IT, WEBTOOLKIT'S TESTER) AND RESULTS FROM FIREFOX DEV.:
Have tested for duplicates including the following characters and patterns:

-- plain English / basic Latin characters
ü
ß   
ø
æ
ô
é
Å
ñ
ç
í
ð
ë
-- A repeated number string
-- Varying numbers of spaces between repeated words
-- A duplicate word with an adcacent special character (closing double quotes in this case)
-- A duplicate word with an adcacent punctuation mark (a comma in this case)
-- A pair of identical character groups separated by a dash and no spaces (the entire group being treated as a word).
-- NB I included the Eszett ('ß') explicitly in the code because initial tests didn't catch it. However, I only included the standard lower-case letter, because the capital version only exists as a newly introduced glyph; no authoritative German dictionary lists any words spelled with a capital Eszett. See https://en.wikipedia.org/wiki/%C3%9F
------------------------------------------------------------------------------------------------------------------
*/

  function proofDraft(draft) {
  var draftMod = draft.replace(/ß/gi, 'ss').replace(/å/gi, 'aa');

  var findRepeats = /\b([a-zA-Zß\u0080-\u00FF]+)\s+\1\b/gi;		
  var proofs = draftMod.match(findRepeats); 
  return proofs;
  }

proofDraft('Prof. Süsskind  Süsskind and fast panting Jin-Jin, his tail tense, stepped forward with trepidation. The sudden rumble and roar of of the heaving ground made Salomé Weiß     Weiß duck instinctively - and just in time to avoid the boulder that crashed with a thud inches above her head. "That was close", whispered  Søren Søren Årndt to Jan Lærke Lærke, but the latter stood transfixed: the collapsed rocks had revealed a mysterious inscription: " La côte côte des 3579 3579 esprits oubliés oubliés sont en Åland Åland" stuttered Señor François, as was his wont. Aríaðna   Aríaðna cast an annoyed glance at him. "Indeed,  Señor  Señor   François       François", she mocked. "I have never ever ever seen anything like it", murmured Baron  Pitoëff           Pitoëff (that was actually his name).');


/*
Süsskind  Süsskind,of of,Weiss     Weiss,Søren Søren,Lærke Lærke,côte côte,oubliés oubliés,aaland aaland,Aríaðna   Aríaðna,Señor  Señor,François       François,ever ever,Pitoëff           Pitoëff
*/


-----------------------------------------------------------------------------------------------------
THE LINK TO THE GITHUB FILE CONTAINING THE CODE, RESULTS, AND COMMENTS:

https://github.com/Art67/Coding-exercises-katas/blob/master/Kata%20draft%20for%20CD

-----------------------------------------------------------------------------------------------------

KATA DESCRIPTION

DESCRIPTION
One of the basic tasks of proofreaders is to try and capture inadvertently repeated words in the text they’re editing. Almost all word-processing software provides such a tool – for instance, Word for Windows has the ‘Find’ command, which can capture a wide range of letter characters in various languages.

Your task is to create a simpler tool that will capture all duplicate words in a text that contains words in English, French, German, Danish, Swedish and Spanish and return the identified duplicates in a single array.  You are provided with a short text with a number of duplicate words, so, essentially, you’re given a bunch of test cases to try out. However, once you’ve worked out how to catch all duplicates in the provided text, you may wish to go ahead and modify both the input and your solution, if necessary.

RESTRICTIONS AND THINGS TO NOTE:
1. The words in the draft text may contain any character from the respective modern alphabet of the languages listed above.
2. Your tool must be capable of capturing all duplicate words with any characters from the specified languages, so long as the repeated words separated by one or more spaces.
2. Your proofing tool must capture only entire words, so you must make sure that it doesn’t capture repeated blocks of numbers (such as ‘2225 2225’).
3. Your proofing tool must be capable of capturing duplicate words regardless of case and of the number of spaces that separates them (e.g. it should catch both ‘Two two’ and ‘two    two’).
4. As in real life, whether the duplicate words should be deleted or not is up to the proofreader to decide. So your proofing tool should not delete or replace with something else the duplicate words it captures (for instance, a proofreader would not delete the second ‘really’ in ‘He’s really really nice’).

TIPS:
1. Javascript still has a strong Anglosaxon bias. 
Which means that capturing characters from non-English alphabets  isn’t always as straightforward as it ought to be.
2. The proofing tool has real-life practical uses.
The tool you’re invited to create represents a (basic) solution to a real-life problem proofreaders who work online often face. Luckily, they’re unlikely to come across texts with as many repetitions as the text you’re invited to check here. 
3. The proofing tool is expandable and thus versatile.
The sample text contains several characters from the alphabets specified further up, but the selection is far from exhaustive. You may well decide to try out other texts with different characters or write your own strings, with real or made up words in any of the languages covered here. If you do, you may discover that your proofing tool doesn’t capture all duplicate words in the string you’ve created. However, whether you come up with a basic or more advanced solution, it should be possible to adapt it so that it deals successfully with just about any character you throw at it.

Good luck, Viel Glück!



